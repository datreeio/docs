{
  "unversionedId": "built-in-rules/argo/prevent-workflow-pods-from-using-the-default-service-account/index",
  "id": "built-in-rules/argo/prevent-workflow-pods-from-using-the-default-service-account/index",
  "title": "☑️ Prevent Workflow pods from using the default service account",
  "description": "All pods in a Workflow run with the service account. The service account can be specified in workflow.spec.serviceAccountName, or if omitted, the default service account of the workflow's namespace is used.  This provides the workflow(i.e the pod) the ability to interact with the Kubernetes API server and because this behavior is enabled by default, it creates a great way for attackers with access to a single container, to abuse Kubernetes with the AutomountServiceAccountToken.",
  "source": "@site/docs/built-in-rules/argo/prevent-workflow-pods-from-using-the-default-service-account/index.mdx",
  "sourceDirName": "built-in-rules/argo/prevent-workflow-pods-from-using-the-default-service-account",
  "slug": "/built-in-rules/prevent-workflow-pods-from-using-the-default-service-account",
  "permalink": "/built-in-rules/prevent-workflow-pods-from-using-the-default-service-account",
  "editUrl": "https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/built-in-rules/argo/prevent-workflow-pods-from-using-the-default-service-account/index.mdx",
  "tags": [],
  "version": "current",
  "frontMatter": {
    "title": "☑️ Prevent Workflow pods from using the default service account",
    "slug": "/built-in-rules/prevent-workflow-pods-from-using-the-default-service-account"
  },
  "sidebar": "sidebar",
  "previous": {
    "title": "☑️ Prevent Workflow from having an empty retry strategy",
    "permalink": "/built-in-rules/prevent-workflow-from-having-an-empty-retry-strategy"
  },
  "next": {
    "title": "Containers",
    "permalink": "/built-in-rules/containers"
  }
}